"""
Script para popular o banco de dados com produtos educacionais de exemplo
Execute: python seed.py
"""

import sys
from decimal import Decimal
from database import SessionLocal, engine
from models import Base, Produto, User
from auth import hash_password

# Dados dos produtos educacionais
PRODUTOS_SEED = [
    # Livros Did√°ticos
    {
        "nome": "Matem√°tica - 6¬∫ Ano",
        "descricao": "Livro did√°tico de matem√°tica para ensino fundamental, com exerc√≠cios pr√°ticos e teoria completa",
        "preco": Decimal("89.90"),
        "estoque": 45,
        "categoria": "Livros",
        "sku": "LIV001",
        "imagem_filename": "matematica-6-ano.jpg"
    },
    {
        "nome": "Portugu√™s - Ensino M√©dio",
        "descricao": "Gram√°tica, literatura e reda√ß√£o para estudantes do ensino m√©dio",
        "preco": Decimal("95.50"),
        "estoque": 32,
        "categoria": "Livros",
        "sku": "LIV002"
    },
    {
        "nome": "Hist√≥ria do Brasil - 9¬∫ Ano",
        "descricao": "Hist√≥ria do Brasil desde o descobrimento at√© os dias atuais, com mapas e ilustra√ß√µes",
        "preco": Decimal("78.90"),
        "estoque": 28,
        "categoria": "Livros",
        "sku": "LIV003",
        "imagem_filename": "historia-brasil-9-ano.png"
    },
    {
        "nome": "Ci√™ncias - 7¬∫ Ano",
        "descricao": "Biologia, f√≠sica e qu√≠mica introdut√≥ria para ensino fundamental",
        "preco": Decimal("85.00"),
        "estoque": 38,
        "categoria": "Livros",
        "sku": "LIV004"
    },
    {
        "nome": "Atlas Geogr√°fico Escolar",
        "descricao": "Atlas completo com mapas do Brasil e do mundo, ideal para estudos geogr√°ficos",
        "preco": Decimal("125.90"),
        "estoque": 15,
        "categoria": "Livros",
        "sku": "LIV005"
    },

    # Material Escolar
    {
        "nome": "Kit Cadernos Universit√°rios (5 unidades)",
        "descricao": "Conjunto de 5 cadernos universit√°rios de 100 folhas cada, capas variadas",
        "preco": Decimal("42.90"),
        "estoque": 67,
        "categoria": "Material Escolar",
        "sku": "MAT001",
        "imagem_filename": "kit-cadernos-universitarios.png"
    },
    {
        "nome": "Estojo Completo com Z√≠per",
        "descricao": "Estojo de 3 compartimentos com 2 canetas, 2 l√°pis, borracha, apontador e r√©gua",
        "preco": Decimal("35.90"),
        "estoque": 89,
        "categoria": "Material Escolar",
        "sku": "MAT002"
    },
    {
        "nome": "Mochila Escolar Grande",
        "descricao": "Mochila resistente com compartimento para notebook, v√°rias cores dispon√≠veis",
        "preco": Decimal("159.90"),
        "estoque": 24,
        "categoria": "Material Escolar",
        "sku": "MAT003",
        "imagem_filename": "mochila-escolar-grande.png"
    },
    {
        "nome": "Kit Canetas Coloridas (12 cores)",
        "descricao": "Conjunto de canetas esferogr√°ficas coloridas para anota√ß√µes e trabalhos",
        "preco": Decimal("18.90"),
        "estoque": 156,
        "categoria": "Material Escolar",
        "sku": "MAT004",
        "imagem_filename": "kit-canetas-coloridas.png"
    },
    {
        "nome": "Calculadora Cient√≠fica",
        "descricao": "Calculadora cient√≠fica com 240 fun√ß√µes, ideal para matem√°tica e f√≠sica",
        "preco": Decimal("89.90"),
        "estoque": 43,
        "categoria": "Material Escolar",
        "sku": "MAT005",
        "imagem_filename": "calculadora-cientifica.png"
    },
    {
        "nome": "Papel A4 Sulfite (500 folhas)",
        "descricao": "Resma de papel sulfite branco 75g/m¬≤, ideal para impress√µes e trabalhos",
        "preco": Decimal("28.90"),
        "estoque": 95,
        "categoria": "Material Escolar",
        "sku": "MAT006"
    },

    # Uniformes
    {
        "nome": "Camisa Polo Azul - Tamanho M",
        "descricao": "Camisa polo em tecido piquet, cor azul marinho, tamanho m√©dio",
        "preco": Decimal("65.90"),
        "estoque": 34,
        "categoria": "Uniformes",
        "sku": "UNI001",
        "imagem_filename": "camisa-polo-azul.png"
    },
    {
        "nome": "Cal√ßa Escolar Azul - Tamanho 40",
        "descricao": "Cal√ßa escolar em tecido gabardine, cor azul marinho, numera√ß√£o 40",
        "preco": Decimal("89.90"),
        "estoque": 28,
        "categoria": "Uniformes",
        "sku": "UNI002"
    },
    {
        "nome": "Jaqueta de Inverno - Tamanho G",
        "descricao": "Jaqueta escolar com capuz, forro interno, cor azul marinho",
        "preco": Decimal("149.90"),
        "estoque": 19,
        "categoria": "Uniformes",
        "sku": "UNI003"
    },
    {
        "nome": "T√™nis Escolar Preto - N¬∞ 38",
        "descricao": "T√™nis escolar em couro sint√©tico, cor preta, numera√ß√£o 38",
        "preco": Decimal("119.90"),
        "estoque": 22,
        "categoria": "Uniformes",
        "sku": "UNI004"
    },

    # Eletr√¥nicos
    {
        "nome": "Tablet Educacional 10 polegadas",
        "descricao": "Tablet com aplicativos educacionais pr√©-instalados, ideal para estudos digitais",
        "preco": Decimal("699.90"),
        "estoque": 8,
        "categoria": "Eletr√¥nicos",
        "sku": "ELE001",
        "imagem_filename": "tablet-educacional.png"
    },
    {
        "nome": "Fones de Ouvido com Microfone",
        "descricao": "Headset para aulas online e atividades multim√≠dia, com controle de volume",
        "preco": Decimal("89.90"),
        "estoque": 56,
        "categoria": "Eletr√¥nicos",
        "sku": "ELE002",
        "imagem_filename": "fones-ouvido-microfone.png"
    },
    {
        "nome": "Pen Drive 32GB",
        "descricao": "Pen drive USB 3.0 de 32GB para armazenar trabalhos e projetos escolares",
        "preco": Decimal("45.90"),
        "estoque": 78,
        "categoria": "Eletr√¥nicos",
        "sku": "ELE003"
    },
    {
        "nome": "Mouse √ìptico USB",
        "descricao": "Mouse √≥ptico com fio USB, ideal para uso com computadores e notebooks",
        "preco": Decimal("25.90"),
        "estoque": 134,
        "categoria": "Eletr√¥nicos",
        "sku": "ELE004"
    },

    # Esportes
    {
        "nome": "Bola de Futebol Oficial",
        "descricao": "Bola de futebol oficial size 5, adequada para jogos e treinamentos escolares",
        "preco": Decimal("89.90"),
        "estoque": 26,
        "categoria": "Esportes",
        "sku": "ESP001",
        "imagem_filename": "bola-futebol-oficial.png"
    },
    {
        "nome": "Kit Raquetes de T√™nis de Mesa",
        "descricao": "Conjunto com 2 raquetes, 3 bolinhas e rede para t√™nis de mesa",
        "preco": Decimal("125.90"),
        "estoque": 14,
        "categoria": "Esportes",
        "sku": "ESP002"
    },
    {
        "nome": "Corda de Pular Profissional",
        "descricao": "Corda de pular com cabo de a√ßo revestido e punhos ergon√¥micos",
        "preco": Decimal("35.90"),
        "estoque": 67,
        "categoria": "Esportes",
        "sku": "ESP003"
    },
    {
        "nome": "Squeeze Escolar 500ml",
        "descricao": "Garrafa squeeze em pl√°stico livre de BPA, com bico dosador",
        "preco": Decimal("22.90"),
        "estoque": 98,
        "categoria": "Esportes",
        "sku": "ESP004"
    },

    # Arte e Criatividade
    {
        "nome": "Kit L√°pis de Cor (36 cores)",
        "descricao": "Conjunto de l√°pis de cor premium com 36 tonalidades diferentes",
        "preco": Decimal("78.90"),
        "estoque": 45,
        "categoria": "Arte",
        "sku": "ART001"
    },
    {
        "nome": "Tinta Guache (12 tubos)",
        "descricao": "Kit de tintas guache coloridas em tubos de 15ml cada, cores vibrantes",
        "preco": Decimal("42.90"),
        "estoque": 38,
        "categoria": "Arte",
        "sku": "ART002"
    },
    {
        "nome": "Papel Cart√£o Colorido (50 folhas)",
        "descricao": "Papel cart√£o em cores variadas, ideal para trabalhos manuais e colagens",
        "preco": Decimal("32.90"),
        "estoque": 72,
        "categoria": "Arte",
        "sku": "ART003"
    }
]

def criar_produtos():
    """Criar produtos no banco de dados"""
    # Criar sess√£o do banco
    db = SessionLocal()
    
    try:
        print("üå± Iniciando seed do banco de dados...")
        
        # Verificar se j√° existem produtos
        produtos_existentes = db.query(Produto).count()
        if produtos_existentes > 0:
            print(f"‚ö†Ô∏è  J√° existem {produtos_existentes} produtos no banco.")
            resposta = input("Deseja continuar e adicionar mais produtos? (s/N): ")
            if resposta.lower() != 's':
                print("‚ùå Seed cancelado pelo usu√°rio.")
                return
        
        # Criar produtos
        produtos_criados = 0
        produtos_erro = 0
        
        for produto_data in PRODUTOS_SEED:
            try:
                # Verificar se SKU j√° existe
                if produto_data.get('sku'):
                    existing = db.query(Produto).filter(Produto.sku == produto_data['sku']).first()
                    if existing:
                        print(f"‚ö†Ô∏è  SKU {produto_data['sku']} j√° existe, pulando...")
                        continue
                
                # Criar produto
                produto = Produto(**produto_data)
                db.add(produto)
                produtos_criados += 1
                
            except Exception as e:
                print(f"‚ùå Erro ao criar produto {produto_data['nome']}: {e}")
                produtos_erro += 1
                continue
        
        # Confirmar transa√ß√£o
        db.commit()
        
        print(f"\n‚úÖ Seed conclu√≠do com sucesso!")
        print(f"üìä Produtos criados: {produtos_criados}")
        print(f"‚ö†Ô∏è  Produtos com erro: {produtos_erro}")
        print(f"üì¶ Total de produtos no banco: {db.query(Produto).count()}")
        
        # Mostrar resumo por categoria
        print(f"\nüìã Resumo por categoria:")
        categorias = db.query(Produto.categoria).distinct().all()
        for categoria in categorias:
            nome_categoria = categoria[0]
            count = db.query(Produto).filter(Produto.categoria == nome_categoria).count()
            print(f"   {nome_categoria}: {count} produtos")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro geral no seed: {e}")
        
    finally:
        db.close()

def limpar_produtos():
    """Limpar todos os produtos do banco (usar com cuidado!)"""
    db = SessionLocal()
    
    try:
        count = db.query(Produto).count()
        if count == 0:
            print("üì≠ N√£o h√° produtos para limpar.")
            return
        
        print(f"‚ö†Ô∏è  ATEN√á√ÉO: Isso ir√° deletar {count} produtos do banco!")
        confirmacao = input("Digite 'CONFIRMAR' para prosseguir: ")
        
        if confirmacao == "CONFIRMAR":
            db.query(Produto).delete()
            db.commit()
            print("üóëÔ∏è  Todos os produtos foram removidos do banco.")
        else:
            print("‚ùå Opera√ß√£o cancelada.")
            
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao limpar produtos: {e}")
    finally:
        db.close()

def criar_usuario_admin():
    """Criar usu√°rio administrador padr√£o"""
    db = SessionLocal()
    
    try:
        # Verificar se j√° existe o admin
        admin_existente = db.query(User).filter(User.email == "admin@loja.com").first()
        if admin_existente:
            print("üë§ Usu√°rio admin j√° existe: admin@loja.com")
            return
        
        # Criar usu√°rio admin
        admin_user = User(
            email="admin@loja.com",
            senha_hash=hash_password("admin123"),
            nome="Administrador",
            telefone="(11) 99999-9999",
            endereco="Rua da Loja, 123 - Centro",
            is_admin=True
        )
        
        db.add(admin_user)
        db.commit()
        print("üë§ Usu√°rio admin criado:")
        print("   üìß Email: admin@loja.com")
        print("   üîë Senha: admin123")
        print("   üõ°Ô∏è  Tipo: Administrador")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao criar usu√°rio admin: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    print("üè™ LOJA ESCOLAR - SEED DO BANCO DE DADOS")
    print("=" * 50)
    
    # Criar tabelas se n√£o existirem
    Base.metadata.create_all(bind=engine)
    
    if len(sys.argv) > 1 and sys.argv[1] == "--limpar":
        limpar_produtos()
    else:
        criar_produtos()
        criar_usuario_admin()
    
    print("\nüéØ Para testar a API:")
    print("   1. Execute: uvicorn app:app --reload")
    print("   2. Acesse: http://localhost:8000/docs")
    print("   3. Teste o endpoint GET /produtos")
    print("   4. Fa√ßa login com: admin@loja.com / admin123")
    print("\nüßπ Para limpar o banco: python seed.py --limpar")
